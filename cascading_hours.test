<?php

/**
 * @file cascading_hours.test
 */

/**
 * Functional test case for cascading_hours
 *
 * @see DrupalWebTestCase
 * @see SimpleTestUnitTestExampleTestCase
 *
 * @ingroup cascading_hours
 */
class CascadingHoursFunctionalTestCase extends DrupalWebTestCase {

  protected $privilegedUser;

  /**
   * Give display information to the SimpleTest system.
   *
   * getInfo() returns a keyed array of information for SimpleTest to show.
   *
   */
  public static function getInfo() {
    return array(
      'name' => 'Cascading Hours Web Test Case',
      'description' => 'Ensure that the cascading_hours module functions properly.',
      'group' => 'cascading_hours',
    );
  }

  /**
   * Set up the test environment.
   *
   * This method is called once per test method, before the test is executed.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // We call parent::setUp() with the list of modules we want to enable.
    parent::setUp('cascading_hours', 'date_api', 'date_popup');
    // Create and log in our user with permission administer_cascading_hours_configuration
    $this->privilegedUser = $this->drupalCreateUser(array('administer_cascading_hours_configuration'));
    $this->drupalLogin($this->privilegedUser);
  }

  /**
   * Create a simpletest_example node using the node form.
   */
  public function testSimpleTestExampleCreate() {
    // Create node to edit.
    $edit = array();
    $edit['title'] = $this->randomName(8);
    $edit["body[und][0][value]"] = $this->randomName(16);
    $this->drupalPost('node/add/simpletest-example', $edit, t('Save'));
    $this->assertText(t('SimpleTest Example Node Type @title has been created.', array('@title' => $edit['title'])));
  }

  /**
   * Create a simpletest_example node and then see if our user can edit it.
   */
  public function testSimpleTestExampleEdit() {
    $settings = array(
      'type' => 'simpletest_example',
      'title' => $this->randomName(32),
      'body' => array(LANGUAGE_NONE => array(array($this->randomName(64)))),
    );
    $node = $this->drupalCreateNode($settings);

    // For debugging, we might output the node structure with $this->verbose()
    // It would only be output if the testing settings had 'verbose' set.
    $this->verbose('Node created: ' . var_export($node, TRUE));

    // We'll run this test normally, but not on the testbot, as it would
    // indicate that the examples module was failing tests.
    if (!$this->runningOnTestbot()) {
      // The debug() statement will output information into the test results.
      // It can also be used in Drupal 7 anywhere in code and will come out
      // as a drupal_set_message().
      debug('We are not running on the PIFR testing server, so will go ahead and catch the failure.');
      $this->drupalGet("node/{$node->nid}/edit");
      // Make sure we don't get a 401 unauthorized response:
      $this->assertResponse(200, 'User is allowed to edit the content.');

      // Looking for title text in the page to determine whether we were
      // successful opening edit form.
      $this->assertText(t("@title", array('@title' => $settings['title'])), "Found title in edit form");
    }
  }

  /**
   * Detect if we're running on PIFR testbot.
   *
   * Skip intentional failure in that case. It happens that on the testbot the
   * site under test is in a directory named 'checkout' or 'site_under_test'.
   *
   * @return bool
   *   TRUE if running on testbot.
   */
  public function runningOnTestbot() {
    // @todo: Add this line back once the testbot variable is available.
    // https://www.drupal.org/node/2565181
    // return env('DRUPALCI');
    return TRUE;
  }
}


/**
 * Performs unit tests on the cascading_hours module
 *
 * @see DrupalUnitTestCase
 *
 * @ingroup cascading_hours
 */
class CascadingHoursUnitTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Cascading Hours unit tests',
      'description' => 'Unit tests for the cascading_hours module.',
      'group' => 'cascading_hours',
    );
  }

  /**
   * Set up the test environment.
   *
   * Note that we use drupal_load() instead of passing our module dependency
   * to parent::setUp(). That's because we're using DrupalUnitTestCase, and
   * thus we don't want to install the module, only load it's code.
   *
   * Also, DrupalUnitTestCase can't actually install modules. This is by
   * design.
   */
  public function setUp() {
    drupal_load('module', 'cascading_hours');
    parent::setUp();
  }

  /**
   * Test cascading_hours_block_cmp().
   * @see cascading_hours_block_cmp
   */
  public function test_cascading_hours_block_cmp() {
    //future timstamp
    $a['start'] = strtotime('tomorrow');
    //present timestamp
    $b['start'] = strtotime('now');
    //past timestamp
    $c['start'] = strtotime('yesterday');

    $result = (0 < cascading_hours_block_cmp($a, $b)); //should be positive
    $message = '(tomorrow, now) should return a positive value.';
    $this->assertTrue($result, $message);

    $result = (0 > cascading_hours_block_cmp($b, $a)); //should be negative
    $message = '(now, tomorrow) should return a negative value.';
    $this->assertTrue($result, $message);

    $result = (0 < cascading_hours_block_cmp($a, $c)); //should be positive
    $message = '(tomorrow, yesterday) should return a positive value.';
    $this->assertTrue($result, $message);

    $result = (0 > cascading_hours_block_cmp($c, $b)); //should be negataive
    $message = '(yesterday, now) should return a negative value.';
    $this->assertTrue($result, $message);

    $result = (0 == cascading_hours_block_cmp($b, $b)); //should be positive
    $message = '(now, now) should return 0.';
    $this->assertTrue($result, $message);
  }

  /**
   * Test cascading_hours_generate_schedule().
   * @see cascading_hours_generate_schedule
   */
  public function test_cascading_hours_generate_schedule() {

    //a week's worth of schedule data
    $test_schedule = [
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('3:00 pm')], ['start_time' => strtotime('4:00 pm'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]],
      [['start_time' => strtotime('9:00 am'), 'end_time' => strtotime('8:00 pm')]]
    ];

    $test_start_date = strtotime('today midnight');

    $test_data = cascading_hours_generate_schedule($test_schedule, $test_start_date);

    $result = (count($test_schedule) == count($test_data)); //should be true
    $message = 'The test schedule and test data should have the same length.';
    $this->assertTrue($result, $message);

    $result = true;
    for($i = 0; $i < count($test_data); ++$i) {
      for($j = 0; $j < count($test_data); ++$j) {
        $result &= (Date('h:i a', strtotime($test_data[$i][$j]['start'])) == Date('h:i a', strtotime($test_schedule[$i][$j]['start_time'])));
        $result &= (Date('h:i a', strtotime($test_data[$i][$j]['end'])) == Date('h:i a', strtotime($test_schedule[$i][$j]['end_time'])));
      }
    }
    $message = 'The test schedule and the test data should have the same schedule information';
    $this->assertTrue($result, $message);
  }

  /**
   * Test cascading_hours_day_cmp()
   * @see cascading_hours_day_cmp
   */
  function test_cascading_hours_day_cmp() {
    // negative if $a < $b, 0 if $a == $b, positive if $a > $b

    $result = (0 < cascading_hours_day_cmp(6, 3)); //should be positive
    $message = '(6, 3) should return a positive value.';
    $this->assertTrue($result, $message);

    $result = (0 > cascading_hours_day_cmp(3, 6)); //should be negative
    $message = '(3, 6) should return a negative value.';
    $this->assertTrue($result, $message);

    $result = (0 < cascading_hours_day_cmp(5, 1)); //should be positive
    $message = '(5, 1) should return a positive value.';
    $this->assertTrue($result, $message);

    $result = (0 > cascading_hours_day_cmp(2, 4)); //should be negataive
    $message = '(2, 4) should return a negative value.';
    $this->assertTrue($result, $message);

    $result = (0 == cascading_hours_day_cmp(3, 3)); //should be positive
    $message = '(3, 3) should return 0.';
    $this->assertTrue($result, $message);
  }
}

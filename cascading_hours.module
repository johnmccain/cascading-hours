<?php

/***  ***/

/**
 *  Comparison function for sorting arrays of schedule blocks
 */
function ch_block_cmp($a, $b) {
  return strtotime($a['start']) - strtotime($b['start']);
}

/**
 *  Generates a schedule array ready for json encoding
 *  The schedule is an array of sorted arrays of schedule blocks within the same day (start and end datetime strings)
 *  @param array $schedules - an array of schedule rows (as returned by ch_get_schedule_in_range_for_location_with_id)
 *  @param int $start_date - timestamp of the starting date of the schedule series (used for offset)
 *  @return array - schedule array ready for json encoding
 */
function ch_generate_schedule($schedules, $start_date) {
  $obj = []; //schedule object (ready for output to json)
  foreach($schedules as $key => $schedule) {
    $date = new DateTime();
    $date->setTimestamp($start_date + ($key * 86400));
    $date_str = $date->format('Y-m-d ');

    $schedule_blocks = []; //array of schedule blocks starting in the same day
    foreach($schedule as $value) {
      $block = []; //schedule block object with start and end datetimes
      $block['start'] = DateTime::createFromFormat('Y-m-d H:i:s', $str . $value['start_time'])->format(DATE_ATOM);
      $block['end'] = DateTime::createFromFormat('Y-m-d H:i:s', $str . $value['end_time'])->format(DATE_ATOM);
      $schedule_blocks[] = $block;
    }
    //sort by block start time
    usort($schedule_blocks, "ch_block_cmp");

    $obj[] = $schedule_blocks;
  }
  return $obj;
}

/*** CREATE FUNCTIONS ***/

/**
 * Save an entry in the database.
 *
 * @param string $table
 *   The table to insert into.
 *
 * @param array $entry
 *   An array containing all the fields of the database record.
 *
 * @see db_insert()
 */
function ch_entry_insert($table, $entry) {
  $return_value = null;
  try {
    $return_value = db_insert($table)
          ->fields($entry)
          ->execute();
  } catch (Exception $e) {
    drupal_set_message(t('db_insert failed. Message = %message, query= %query',
    array('%message' => $e->getMessage(), '%query' => $e->query_string)), 'error');
  }
  return $return_value;
}

/**
 * Create a location with name $name if one doesn't already exist
 *
 * @param string $name
 *   The name of the new location
 */
function ch_create_location($name) {
  $result = db_select('cascading_hours_locations')
            ->fields('name')
            ->condition('name', $name, '=')
            ->execute()
            ->fetchAssoc();
  if($result) {
    //Location with name $name already exists TODO: give some kind of feedback to user
    drupal_set_message(t('Tried to create location with name %name but one already exists.',
    array('%name' => $name)), 'error');
  } else {
    //Create location
    $entry['name'] = $name;
    ch_entry_insert('locations', $entry);
  }
}


/*** GET FUNCTIONS ***/

/**
 *
 */
function ch_get_schedule_in_range_for_location_with_name($location_name, $start_date, $end_date) {
  $location = db_select('cascading_hours_locations')
            ->fields('id', 'name')
            ->condition('name', $name, '=')
            ->execute()
            ->fetchAssoc();

  if($location['id']) {
    ch_get_schedule_in_range_for_location_with_id($location['id']);
  } else {
    return [];
  }
}

/**
 *
 *  @param int $location_id
 *  @param int $start_date - UNIX timestamp for start of date range
 *  @param int $end_date - UNIX timestamp for end of date range
 */
function ch_get_schedule_in_range_for_location_with_id($location_id, $start_date, $end_date) {

  $rules = ch_get_rules_in_range_for_location_with_id($location_id, $start_date, $end_date);

  //array of indexes of the rule that applies on that day offset from $start_date (NULL if no applicable rule found)
  $days_rules= [];

  $num_days = round(($end_date - $start_date) / 86400);

  for($i = 0; $i < $num_days; ++$i) {
    $day = $start_date + ($i * 86400);
    $index = -1;
    foreach($rules as $key => $rule) {
      if($rule['start_date'] <= $day && $rule['end_date'] > $day) {
        $index = $key;
        break;
      }
    }
  }

  $schedules = [];
  for($i = 0; $i < $num_days; ++$i) {
    if($days_rules[$i]) {
      $day_of_week = (int)date('w', $start_date + ($i * 86400));
      $rules_schedules = ch_get_schedules_with_rule_id_and_day($rules[$days_rules[$i]]['id'], $day_of_week);
      $day_schedule = [];
      foreach($rules_schedules as $schedule) {
        if($schedule['day']){
          //refactor
          $day_schedule[] = $schedule;
        }
      }
      $schedules[$i] = $day_schedule;
    }
  }

  //array (indexed by day #) of schedule arrays
  return $schedules;

  //at this point we have an array of schedule arrays, we can return this (might want to clean up first)
  //TODO: finish, test

}

/**
 *  Finds all rules for a location within a given range
 *  @param int $location_id
 *  @param int $start_date - UNIX timestamp for start of date range
 *  @param int $end_date - UNIX timestamp for end of date range
 *
 *  @return array - 2d array of rules and their fields, ordered by priority
 */
function ch_get_rules_in_range_for_location_with_id($location_id, $start_date, $end_date) {
  $rules = db_select('cascading_hours_rules', 'c')
            ->fields('c')
            ->condition('location_id', $location_id, '=')
            ->condition('start_date', date('YYYY-MM-DD HH:MM:SS', $start_date), '>')
            ->condition('end_date', date('YYYY-MM-DD HH:MM:SS', $end_date), '<')
            ->orderBy('priority', 'ASC')
            ->execute()
            ->fetchAssoc();
  return $rules;
}

/**
 * Returns an array of rules with the given location_id
 * @param int $location_id - the location_id to find matching rules for
 *
 * @return array - a 2d array of rules and their fields
 */
function ch_get_rules_with_location_id($location_id) {
  $rules = db_select('cascading_hours_rules', 'c')
            ->fields('c')
            ->condition('location_id', $location_id, '=')
            ->execute()
            ->fetchAssoc();

  return $rules;
}

/**
 *  Returns all schedules with specified rule_id
 *  @param int $rule_id - the rule id to filter by
 *  @return array - an array of schedules
 */
function ch_get_schedules_with_rule_id($rule_id) {
  $schedules = db_select('cascading_hours_schedules', 'c')
            ->fields('c')
            ->condition('rule_id', $rule_id, '=')
            ->execute()
            ->fetchAssoc();
  return $schedules;
}

/**
 *  Returns all schedules with specified rule_id and day of week
 *  @param int $rule_id - the rule id to filter by
 *  @param int $day_of_week - the day of the week to filter by
 *  @return array - an array of schedules
 */
function ch_get_schedules_with_rule_id_and_day($rule_id, $day_of_week) {
  $schedules = db_select('cascading_hours_schedules', 'c')
            ->fields('c')
            ->condition('rule_id', $rule_id, '=')
            ->condition('day', $day_of_week, '=')
            ->execute()
            ->fetchAssoc();
  return $schedules;
}

/*** DELETE FUNCTIONS ***/

/**
 *  Deletes all locations with given name and all associated rules
 *
 *  @param string $name
 */
function ch_delete_location_with_name($name) {
  $location = db_select('cascading_hours_locations')
            ->fields('id', 'name')
            ->condition('name', $name, '=')
            ->execute()
            ->fetchAssoc();

  if($location['id']) {
    ch_delete_location_with_id($location['id']);
  }
}

/**
 *  Deletes all locations with given id and all associated rules
 *
 *  @param int $id
 */
function ch_delete_location_with_id($id) {
  ch_delete_rules_with_location_id($id);
  $result = db_delete('cascading_hours_locations')
            ->condition('id', $id, '=')
            ->execute();
}

/**
 *  Deletes all rules with given location_id and all associated schedules
 *
 *  @param int $location_id
 */
function ch_delete_rules_with_location_id($location_id) {
  $rules = ch_get_rules_with_location_id($location_id);

  //delete rules and all associated schedules
  foreach($rules as $rule) {
    ch_delete_rule_with_id($rule['id']);
  }
}

/**
 *  Deletes a rule with given id and all associated schedules
 *
 *  @param int $id
 */
function ch_delete_rule_with_id($id) {
  $result = db_delete('cascading_hours_rules')
            ->condition('id', $id, '=')
            ->execute();

  ch_delete_schedule_with_rule_id($id);
}

/**
 *  Deletes all schedules with given rule_id
 *
 *  @param int $rule_id
 */
function ch_delete_schedule_with_rule_id($rule_id) {
  $schedules = db_select('cascading_hours_schedules')
            ->fields('id', 'rule_id')
            ->condition('rule_id', $rule_id, '=')
            ->execute()
            ->fetchAssoc();

  //delete schedules
  foreach($schedules as $schedule) {
    ch_delete_rule_with_id($schedule['id']);
  }
}

/**
 *  Deletes a schedule with given id
 *
 *  @param int $id
 */
function ch_delete_schedule_with_id($id) {
  $result = db_delete('cascading_hours_schedules')
            ->condition('id', $id, '=')
            ->execute();
}

<?php
/**
 * @file
 * Module file for Cascading Hours module
 */

/*** ADMIN UI ***/

/**
 * Implements hook_menu().
 */
function cascading_hours_menu()
{
    $include_path = drupal_get_path('module', 'cascading_hours') . '/includes';
    $items = [];
    $items['admin/structure/cascading_hours'] = array(
        'title' => 'Cascading Hours',
        'description' => 'Manage Cascading Hours general settings.',
        'page callback' => 'cascading_hours_admin',
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/location/%'] = array(
        'title' => 'Cascading Hours: Edit Location',
        'description' => 'Edit a Cascading Hours location.',
        'page callback' => 'cascading_hours_admin_edit_location',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/location/add'] = array(
        'title' => 'Cascading Hours: Add Location',
        'description' => 'Add a new Cascading Hours location.',
        'page callback' => 'cascading_hours_admin_add_location',
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/location/%/delete'] = array(
        'title' => 'Cascading Hours: Delete Location',
        'description' => 'Delete a Cascading Hours location.',
        'page callback' => 'cascading_hours_admin_delete_location',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/rule/%'] = array(
        'title' => 'Cascading Hours: Edit Rule',
        'description' => 'Edit a Cascading Hours rule.',
        'page callback' => 'cascading_hours_admin_edit_rule',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/rule/add'] = array(
        'title' => 'Cascading Hours: Add Rule',
        'description' => 'Create a Cascading Hours rule.',
        'page callback' => 'cascading_hours_admin_add_rule',
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/rule/%/delete'] = array(
        'title' => 'Cascading Hours: Delete Rule',
        'description' => 'Delete a Cascading Hours rule.',
        'page callback' => 'cascading_hours_admin_delete_rule',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );
    $items['admin/structure/cascading_hours/schedule/%/delete'] = array(
        'title' => 'Cascading Hours: Delete Schedule',
        'description' => 'Delete a Cascading Hours schedule.',
        'page callback' => 'cascading_hours_admin_delete_schedule',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.admin.php',
        'file path' => $include_path
    );

    $items['admin/structure/cascading_hours/cron'] = array(
      'title' => 'Cascading Hours Cron',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cascading_hours_cron_form'),
      'access callback' => true,
    );
    $items['admin/structure/cascading_hours/import/%'] = array(
        'title' => 'Cascading Hours: Import a Schedule',
        'description' => 'Import a schedule to Cascading Hours.',
        'page callback' => 'cascading_hours_admin_import',
        'page arguments' => array(
            4
        ) ,
        'access arguments' => array(
            'administer_cascading_hours_configuration'
        ) ,
        'file' => 'cascading_hours.import.php',
        'file path' => $include_path
    );
    return $items;
}

/**
 * Implements hook_block_info().
 */
function cascading_hours_block_info()
{
    $blocks = array();
    $blocks['week_view'] = array(
        'info' => t('Cascading Hours Week View'),
    );
    $blocks['nav_view'] = array(
        'info' => t('Cascading Hours Nav View'),
    );
    return $blocks;
}

/**
 * Implements hook_block_configure
 *
 * @param  string $delta - the unique identifier for the block being altered
 * @return array - markup array for configuration form
 */
function cascading_hours_block_configure($delta = '')
{
    //TODO: check for deleted locations
    $current_display_locations;

    switch($delta) {
    case 'week_view':
        $current_display_locations = variable_get('cascading_hours_week_view_display_locations', array());
        break;
    case 'nav_view':
        $current_display_locations = variable_get('cascading_hours_nav_view_display_locations', array());
        break;
    }

    $locations = cascading_hours_get_locations();
    $display_locations = [];
    foreach($locations as $location) {
        $display_locations[$location['id']] = $location['name'];
    }

    $form = [];

    $form['locations'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Select Locations to Display'),
        '#description' => t('Select locations for which the should render schedules.'),
        '#options' => $display_locations,
        '#default_value' => $current_display_locations,
    );

    return $form;
}

/**
 * Implements hook_block_save().
 *
 * @param string $delta - the unique identifier for the block being altered
 * @param array  $edit  - array of configuration form information
 */
function cascading_hours_block_save($delta = '', $edit = array())
{
    switch($delta) {
    case 'week_view':
        variable_set('cascading_hours_week_view_display_locations', $edit['locations']);
        break;
    case 'nav_view':
        variable_set('cascading_hours_nav_view_display_locations', $edit['locations']);
        break;
    }
}

/**
 * Implements hook_block_view().
 */
function cascading_hours_block_view($delta = '')
{
    $block = array();

    switch($delta) {
    case 'week_view' :
        $block['content'] = cascading_hours_block_week_view();
        break;
    case 'nav_view' :
        $block['content'] = cascading_hours_block_nav_view();
        break;
    }
    return $block;
}

/**
 * Helper function that generates the markup for the week_view block
 */
function cascading_hours_block_week_view()
{
    $page = '';
    $display_locations = variable_get('cascading_hours_week_view_display_locations');
    $start = strtotime('today midnight');
    $end = strtotime('today midnight', $start + 60 * 60 * 24 * 7);
    foreach($display_locations as $location_id) {
        $location = cascading_hours_get_location_with_id($location_id);
        $start = strtotime('today midnight');
        $end = strtotime('today midnight', $start + 60 * 60 * 24 * 7);
        $schedule = cascading_hours_get_schedule_in_range_for_location_with_id($location_id, $start, $end);
        $schedule = cascading_hours_generate_schedule($schedule, $start);

        $page .= '<h3>' . $location['name'] . '</h3><ul>';
        foreach($schedule as $day => $day_schedule) {
            $page .= '<li>' . date('l, n/d', $start + ($day * 60 * 60 * 24)) . ': ';
            if($day_schedule == []) {
                $page .= 'closed';
            } else {
                foreach($day_schedule as $schedule_block) {
                    $page .= date('g:ia', strtotime($schedule_block['start']));
                    $page .= ' - ';
                    $page .= date('g:ia', strtotime($schedule_block['end'])) . " ";
                }
            }
            $page .= '</li>';
        }
        $page .= '</ul>';
    }
    return $page;
}

/**
 * Helper function that generates the markup for the nav_view block
 */
function cascading_hours_block_nav_view()
{
    $display_locations = variable_get('cascading_hours_nav_view_display_locations');

    $page = '<div class="cascading-hours-nav-view" data-module-path="' . base_path() . drupal_get_path('module', 'cascading_hours') . '">
    <a class="nav-view-left" href="javascript:void(0)">&lsaquo;</a>
    <select class="nav-view-locations" name="nav-view-locations">';
    $first = true;
    foreach($display_locations as $location_id) {
        echo "<script>console.log('" . json_encode($display_locations) . "')</script>";
        $location = cascading_hours_get_location_with_id($location_id);
        if($first) {
            $page .= '<option selected value="' . $location['id'] . '">' . $location['name'] . '</option>';
            $first = false;
        } else {
            $page .= '<option value="' . $location['id'] . '">' . $location['name'] . '</option>';
        }
    }
    $page .= '</select>
    <a class="nav-view-right" href="javascript:void(0)">&rsaquo;</a>
    <div class="nav-view-schedule"><p>Loading...</p></div>
    </div>';
    drupal_add_js(drupal_get_path('module', 'cascading_hours') . '/js/cascading_hours_nav_view.js');
    drupal_add_css(drupal_get_path('module', 'cascading_hours') . '/css/cascading_hours_nav_view.css');
    return $page;
}

/**
 * Form to run cron manually
 */
function cascading_hours_cron_form($form, &$form_state)
{
    if (user_access('administer site configuration')) {
        $form['cron_run'] = array(
        '#type' => 'fieldset',
        '#title' => t('Run cron manually'),
        '#description' => t("Run cascading_hours's cron to immediately delete old rules."),
        );
        $form['cron_run']['cron_trigger'] = array(
          '#type' => 'submit',
          '#value' => t('Run cron now'),
          '#submit' => array('cascading_hours_form_cron_run_submit'),
        );
    }
    $form['go_back'] = array(
        '#markup' => l(t("Go back"), "admin/structure/cascading_hours"),
    );

    return $form;
}

/**
 * Allow user to directly execute cron, optionally forcing it.
 */
function cascading_hours_form_submit($form, &$form_state)
{
    $GLOBALS['cascading_hours_show_status_message'] = true;
    if (drupal_cron_run()) {
        drupal_set_message(t('Cron ran successfully.'));
    }
    else {
        drupal_set_message(t('Cron run failed.'), 'error');
    }
}

/**
* Implements hook_cron().
 *
 * On run deletes rules older than specified time (if enabled)
 */
function cascading_hours_cron()
{
    $delete_old_rules = variable_get('cascading_hours_delete_old_rules');
    if($delete_old_rules) {
        $max_age_in_days = variable_get('cascading_hours_old_rules_age');
        if(!is_numeric($max_age_in_days)) {
            //error, set message and return
            watchdog('cascading_hours', 'Error: cascading_hours_old_rules_age is not numeric.  Set at Cascading Hours configuration page.', [], WATCHDOG_ERROR);
            return;
        }
        $ref_date =  date('Y-m-d H:i:s', time() - ($max_age_in_days * 60 * 60 * 24));

        $rules = db_select('cascading_hours_rules', 'c')
        ->fields('c')
        ->condition('end_date', $ref_date, '<')
        ->execute();

        $rules = cascading_hours_query_to_array($rules);
        foreach($rules as $rule) {
            cascading_hours_delete_rule_with_id($rule['id']);
        }

        watchdog('cascading_hours', "Deleted all rules with end dates before $ref_date at time " . date('Y-m-d H:i:s'));

    }
}

/**
 * Implements hook_permission().
 */
function cascading_hours_permission()
{
    return array(
        'administer_cascading_hours_configuration' => array(
            'title' => t('Administer cascading hours configuration') ,
            'description' => t('Allows the user to configure all cascading hours general settings and create/edit/delete locations and rules.') ,
        )
    );
}

/**
 * Implements hook_admin_paths().
 */
function cascading_hours_admin_paths()
{
    return array(
        'admin/structure/cascading_hours' => true,
        'admin/structure/cascading_hours/*' => true,
        'admin/structure/cascading_hours/location/add' => true,
        'admin/structure/cascading_hours/location/*' => true,
        'admin/structure/cascading_hours/location/*/delete' => true,
        'admin/structure/cascading_hours/rule/*' => true,
        'admin/structure/cascading_hours/rule/add' => true,
        'admin/structure/cascading_hours/rule/*/delete' => true,
        'admin/structure/cascading_hours/schedule/*/delete' => true,
    );
}

/*** Cascading Algorithm Functions ***/

/**
 *  Comparison function for sorting arrays of schedule blocks
 *
 *  @param  array $a - schedule block
 *  @param  array $b - schedule block
 *  @return int - negative if $a < $b, 0 if $a == $b, positive if $a > $b
 */
function cascading_hours_block_cmp($a, $b)
{
    return strtotime($a['start']) - strtotime($b['start']);
}

/**
 *  Turns a query (as generated by db_query) into a keyed array of its results
 *
 *  @param  DatabaseConnection_mysql $query - the query to transform
 *  @return array - the query as a keyed array
 */
function cascading_hours_query_to_array($query)
{
    $arr = [];
    while ($row = $query->fetchAssoc()) {
        $arr[] = $row;
    }
    return $arr;
}

/**
 *  Generates a schedule array ready for json encoding
 *  The schedule is an array of sorted arrays of schedule blocks within the same day (start and end datetime strings)
 *
 *  @param  array $schedules  - an array of schedule rows (as returned by cascading_hours_get_schedule_in_range_for_location_with_id)
 *  @param  int   $start_date - timestamp of the starting date of the schedule series (used for offset)
 *  @return array - schedule array ready for json encoding
 */
function cascading_hours_generate_schedule($schedules, $start_date)
{
    $obj = []; //schedule object (ready for output to json)
    foreach($schedules as $key => $schedule) {
        $date = new DateTime();
        $date
        ->setTimestamp($start_date + ($key * 86400));
        $date_str = $date
        ->format('Y-m-d ');
        $schedule_blocks = []; //array of schedule blocks starting in the same day
        foreach($schedule as $value) {
            $block = []; //schedule block object with start and end datetimes
            $block['start'] = DateTime::createFromFormat('Y-m-d H:i:s', $date_str . $value['start_time'])
            ->format(DATE_ATOM);
            $block['end'] = DateTime::createFromFormat('Y-m-d H:i:s', $date_str . $value['end_time'])
            ->format(DATE_ATOM);
            $schedule_blocks[] = $block;
        }

        // sort by block start time

        usort($schedule_blocks, "cascading_hours_block_cmp");
        $obj[] = $schedule_blocks;
    }

    return $obj;
}

/*** CREATE FUNCTIONS ***/

/**
 * Create a location with name $name if one doesn't already exist
 *
 * @param string $name
 *   The name of the new location
 */
function cascading_hours_create_location($name)
{
    $result = db_select('cascading_hours_locations', 'c')
    ->fields('c')
    ->condition('name', $name, '=')
    ->execute()
    ->fetchAssoc();
    if ($result) {

        // Location with name $name already exists TODO: give some kind of feedback to user

        drupal_set_message(
            t(
                'Tried to create location with name %name but one already exists.', array(
                '%name' => $name
                )
            ), 'error'
        );
        return null;
    }
    else {
        // Create location
        $entry = [];
        $entry['name'] = $name;
        $location_id = db_insert('cascading_hours_locations')
        ->fields($entry)
        ->execute();
    }

    return $location_id;
}

/**
 *  Creates a rule with given attributes
 *
 *  @param int    $location_id
 *  @param int    $priority
 *  @param int    $start_date  - a unix timestamp of the start date
 *  @param int    $end_date    - a unix timestamp of the end date
 *  @param string $alias       = null - optional alias for the rule
 */
function cascading_hours_create_rule($location_id, $priority, $start_date, $end_date, $alias = null)
{
    $entry = [];
    $entry['location_id'] = $location_id;
    $entry['priority'] = $priority;
    $entry['start_date'] = date('Y-m-d H:i:s', $start_date);
    $entry['end_date'] = date('Y-m-d H:i:s', $end_date);
    if ($alias) {
        $entry['alias'] = $alias;
    }

    $rule_id = db_insert('cascading_hours_rules')
    ->fields($entry)
    ->execute();
    return $rule_id;
}

/**
 *  Inserts a new schedule into the database with given values
 *
 *  @param  int $rule_id    - the id of the schedule's rule
 *  @param  int $day        - the day of the week the rule applies to (0 for Sunday, 6 for Saturday)
 *  @param  int $start_time - a unix timestamp for the starting time (date information discarded)
 *  @param  int $end_time   - a unix timestamp for the ending time (date information discarded)
 *  @return int - the inserted schedule's id
 */
function cascading_hours_create_schedule($rule_id, $day, $start_time, $end_time)
{
    $entry = [];
    $entry['rule_id'] = $rule_id;
    $entry['day'] = $day;
    $entry['start_time'] = date('H:i:s', $start_time);
    $entry['end_time'] = date('H:i:s', $end_time);
    $schedule_id = db_insert('cascading_hours_schedules')
    ->fields($entry)
    ->execute();
    return $schedule_id;
}

/*** GET FUNCTIONS ***/

/**
 *
 *  @param string $location_name
 *  @param int    $start_date    - UNIX timestamp for start of date range
 *  @param int    $end_date      - UNIX timestamp for end of date range
 */
function cascading_hours_get_schedule_in_range_for_location_with_name($location_name, $start_date, $end_date)
{
    $location = db_select('cascading_hours_locations', 'c')
    ->fields('c')
    ->condition('name', $location_name, '=')
    ->execute()
    ->fetchAssoc();
    if ($location['id']) {
        return cascading_hours_get_schedule_in_range_for_location_with_id($location['id'], $start_date, $end_date);
    }
    else {
        echo "<h3>No name match!</h3>";
        return array(
            'error' => 'no such location'
        );
    }
}

/**
 *
 *  @param int $location_id
 *  @param int $start_date  - UNIX timestamp for start of date range
 *  @param int $end_date    - UNIX timestamp for end of date range
 */
function cascading_hours_get_schedule_in_range_for_location_with_id($location_id, $start_date, $end_date)
{
    $rules = cascading_hours_get_rules_in_range_for_location_with_id($location_id, $start_date, $end_date);
    $rules = cascading_hours_query_to_array($rules);

    // array of indexes of the rule that applies on that day offset from $start_date (NULL if no applicable rule found)

    $days_rules = [];
    $num_days = round(($end_date - $start_date) / 86400);
    for ($i = 0; $i < $num_days; ++$i) {
        $day = $start_date + ($i * 86400);
        foreach($rules as $rule) {
            if (strtotime($rule['start_date']) <= $day && strtotime($rule['end_date']) > $day) {
                $days_rules[$i] = $rule;
                break;
            }
        }
    }

    $schedules = [];
    foreach($days_rules as $i => $rule) {
        $day_of_week = (int)date('w', $start_date + ($i * 86400));
        $rules_schedules = cascading_hours_get_schedules_with_rule_id_and_day($rule['id'], $day_of_week);
        $day_schedule = [];
        foreach($rules_schedules as $schedule) {
            $schedule = json_decode(json_encode($schedule), true); //convert from object to array
            if (array_key_exists('day', $schedule)) {
                $day_schedule[] = $schedule;
            }
        }

        $schedules[$i] = $day_schedule;
    }

    // array (indexed by day #) of schedule arrays

    return $schedules;
}

/**
 *  Adds an array of schedules belonging to each rule as a field (for Admin UI purposes)
 *
 *  @param  array $rules - a 2d array of rules and their fields
 *  @return array - a 2d array of rules and their fields with schedules property
 */
function cascading_hours_concat_rules_with_schedules($rules)
{
    foreach($rules as $rule) {
        $rule['schedules'] = cascading_hours_get_schedules_with_rule_id($rule['id']);
    }

    return $rules;
}

/**
 *  Finds all locations and returns an associative array of their ids and names
 *
 *  @return array - 2d keyed array of locations
 */
function cascading_hours_get_locations()
{
    $locations = db_select('cascading_hours_locations', 'c')
    ->fields('c')
    ->execute();
    $arr = [];
    while ($loc = $locations->fetchAssoc()) {
        $arr[] = $loc;
    }

    return $arr;
}

/**
 *  Finds all locations and returns an associative array of their ids and names
 *
 *  @return array - 2d keyed array of locations
 */
function cascading_hours_get_location_with_id($location_id)
{
    $location = db_select('cascading_hours_locations', 'c')
    ->fields('c')
    ->condition('id', $location_id, '=')
    ->execute()
    ->fetchAssoc();
    return $location;
}

/**
 * Gets rules with a given location_id that start and end within the given range
 * @param int $location_id
 * @param int $start_date - timestamp for start of date range (inclusive)
 * @param int $end_date - timestamp for end of date range (inclusive)
 * @return array - array of rules
 */
function cascading_hours_get_rules_contained_within_range_with_location_id($location_id, $start_date, $end_date) {
    $rules = db_select('cascading_hours_rules', 'c')
    ->fields('c')
    ->condition('location_id', $location_id, '=')
    ->condition(
        db_and()
        ->condition('start_date', date('Y-m-d H:i:s', $start_date), '>=')
        ->condition('end_date', date('Y-m-d H:i:s', $end_date), '<=')
        )
        ->execute();
    return cascading_hours_query_to_array($rules);
}

/**
 *  Finds all rules for a location within a given range
 *
 *  @param int $location_id
 *  @param int $start_date  - UNIX timestamp for start of date range
 *  @param int $end_date    - UNIX timestamp for end of date range
 *
 *  @return array - 2d array of rules and their fields, ordered by priority
 */
function cascading_hours_get_rules_in_range_for_location_with_id($location_id, $start_date, $end_date)
{
    // select * from cascading_hours_rules where location_id = $location_id and start_date >= $start_date and end_date <= $end_date order by priority asc;

    $rules = db_select('cascading_hours_rules', 'c')
    ->fields('c')
    ->condition('location_id', $location_id, '=')
    ->condition(
        db_or()
        ->condition('start_date', date('Y-m-d H:i:s', $end_date), '<=')
        ->condition('end_date', date('Y-m-d H:i:s', $start_date), '>=')
    )
    ->orderBy('priority', 'ASC')
    ->execute();

    return $rules;
}

/**
 * Returns an array of rules with the given location_id
 *
 * @param  int $location_id - the location_id to find matching rules for
 * @return array - a 2d keyed array of rules and their fields
 */
function cascading_hours_get_rules_with_location_id($location_id)
{
    $rules = db_select('cascading_hours_rules', 'c')
    ->fields('c')
    ->condition('location_id', $location_id, '=')
    ->execute();
    $arr = [];
    while ($rule = $rules->fetchAssoc()) {
        $arr[] = $rule;
    }

    return $arr;
}

/**
 * Returns the rule with a given id
 *
 * @param  int $rule_id - the id of the rule to find
 * @return array - an array of the rule's fields (empty if none found)
 */
function cascading_hours_get_rule_with_id($rule_id)
{
    $rule = db_select('cascading_hours_rules', 'c')
    ->fields('c')
    ->condition('id', $rule_id, '=')
    ->execute()
    ->fetchAssoc();
    return $rule;
}

/**
 *  Returns all schedules with specified rule_id
 *
 *  @param  int $rule_id - the rule id to filter by
 *  @return array - an array of schedules
 */
function cascading_hours_get_schedules_with_rule_id($rule_id)
{
    $schedules = db_select('cascading_hours_schedules', 'c')
    ->fields('c')
    ->condition('rule_id', $rule_id, '=')
    ->execute();
    $arr = [];
    while ($sched = $schedules->fetchAssoc()) {
        $arr[] = $sched;
    }

    return $arr;
}

/**
 *  Returns all schedules with specified rule_id and day of week
 *
 *  @param  int $rule_id     - the rule id to filter by
 *  @param  int $day_of_week - the day of the week to filter by
 *  @return array - an array of schedules
 */
function cascading_hours_get_schedules_with_rule_id_and_day($rule_id, $day_of_week)
{
    $schedules = db_select('cascading_hours_schedules', 'c')
    ->fields('c')
    ->condition('rule_id', $rule_id, '=')
    ->condition('day', $day_of_week, '=')
    ->execute();
    return $schedules;
}

/**
 *  Returns the schedule with specified id
 *
 *  @param  int $id          - the schedule's id
 *  @param  int $day_of_week - the day of the week to filter by
 *  @return array - an array of schedules
 */
function cascading_hours_get_schedule_with_id($id)
{
    $schedule = db_select('cascading_hours_schedules', 'c')
    ->fields('c')
    ->condition('id', $id, '=')
    ->execute()
    ->fetchAssoc();
    return $schedule;
}

/*** UPDATE FUNCTIONS ***/

/**
 * Update a location
 *
 * @param int $location_id
 * @param
 */
function cascading_hours_update_location($location_id, $name = null)
{
    if ($name) {
        db_update('cascading_hours_locations') // Table name no longer needs {}


        ->fields(
            array(
            'name' => $name
            )
        )
        ->condition('id', $location_id, '=')
        ->execute();
    }
}

/**
 *  Creates a rule with given attributes
 *
 *  @param int    $rule_id
 *  @param int    $location_id
 *  @param int    $priority
 *  @param int    $start_date  - a unix timestamp of the start date
 *  @param int    $end_date    - a unix timestamp of the end date
 *  @param string $alias       = null - optional alias for the rule
 */
function cascading_hours_update_rule($rule_id, $location_id, $priority, $start_date, $end_date, $alias = null)
{
    if (!($rule_id != null && $location_id != null && $priority != null && $start_date && $end_date)) {
        return;
    }

    $entry = [];
    $entry['location_id'] = $location_id;
    $entry['priority'] = $priority;
    $entry['start_date'] = date('Y-m-d H:i:s', $start_date);
    $entry['end_date'] = date('Y-m-d H:i:s', $end_date);
    if ($alias) {
        $entry['alias'] = $alias;
    }

    db_update('cascading_hours_rules')
    ->fields($entry)
    ->condition('id', $rule_id, '=')
    ->execute();
}

/*** DELETE FUNCTIONS ***/

/**
 *  Deletes location with given name and all associated rules
 *
 *  @param string $name
 */
function cascading_hours_delete_location_with_name($name)
{
    $location = db_select('cascading_hours_locations', 'c')
    ->fields('c')
    ->condition('name', $name, '=')
    ->execute()
    ->fetchAssoc();
    if ($location['id']) {
        cascading_hours_delete_location_with_id($location['id']);
    }
}

/**
 *  Deletes location with given id and all associated rules
 *
 *  @param int $id
 */
function cascading_hours_delete_location_with_id($id)
{
    cascading_hours_delete_rules_with_location_id($id);
    $result = db_delete('cascading_hours_locations')
    ->condition('id', $id, '=')
    ->execute();
    cascading_hours_delete_rules_with_location_id($id);
}

/**
 *  Deletes all rules with given location_id and all associated schedules
 *
 *  @param int $location_id
 */
function cascading_hours_delete_rules_with_location_id($location_id)
{
    $rules = cascading_hours_get_rules_with_location_id($location_id);

    // delete rules and all associated schedules

    foreach($rules as $rule) {
        $rule = json_decode(json_encode($rule), true); //convert from object to array
        cascading_hours_delete_rule_with_id($rule['id']);
    }
}

/**
 *  Deletes a rule with given id and all associated schedules
 *
 *  @param int $id
 */
function cascading_hours_delete_rule_with_id($id)
{
    $result = db_delete('cascading_hours_rules')
    ->condition('id', $id, '=')
    ->execute();
    cascading_hours_delete_schedules_with_rule_id($id);
}

/**
 *  Deletes all schedules with given rule_id
 *
 *  @param int $rule_id
 */
function cascading_hours_delete_schedules_with_rule_id($rule_id)
{
    $schedules = db_select('cascading_hours_schedules', 'c')
    ->fields('c')
    ->condition('rule_id', $rule_id, '=')
    ->execute();

    // delete schedules

    foreach($schedules as $schedule) {
        $schedule = json_decode(json_encode($schedule), true); //convert from object to array
        cascading_hours_delete_schedule_with_id($schedule['id']);
    }
}

/**
 *  Deletes a schedule with given id
 *
 *  @param int $id
 */
function cascading_hours_delete_schedule_with_id($id)
{
    $result = db_delete('cascading_hours_schedules')
    ->condition('id', $id, '=')
    ->execute();
}
